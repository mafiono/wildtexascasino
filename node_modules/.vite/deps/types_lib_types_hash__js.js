import {
  __commonJS
} from "./chunk-5CYG367S.js";

// node_modules/types/lib/types/hash.js
var require_hash = __commonJS({
  "node_modules/types/lib/types/hash.js"(exports, module) {
    "use strict";
    function key_idx(self, key) {
      return self.__hash_keys__.indexOf(key);
    }
    var Hash = module.exports = function Hash2(defaultValue) {
      this.__hash_index__ = 0;
      this.__hash_keys__ = [];
      this.__hash_vals__ = [];
      this.__default_value__ = "function" === typeof defaultValue ? defaultValue : function() {
        return defaultValue;
      };
      this.__count__ = 0;
    };
    Hash.prototype.store = function store(key, val) {
      var i = this.__hash_keys__.indexOf(key);
      if (0 <= i) {
        this.__hash_vals__[i] = val;
        return;
      }
      i = this.__hash_index__;
      this.__hash_index__ += 1;
      this.__count__ += 1;
      this.__hash_keys__[i] = key;
      this.__hash_vals__[i] = val;
      return val;
    };
    Hash.prototype.set = Hash.prototype.store;
    Hash.prototype.remove = function remove(key) {
      var i = key_idx(this, key), val = this.__hash_vals__[i];
      if (0 <= i) {
        delete this.__hash_keys__[i];
        delete this.__hash_vals__[i];
        this.__count__ -= 1;
      }
      return val;
    };
    Hash.prototype.hasKey = function hasKey(key) {
      return 0 <= key_idx(this, key);
    };
    Hash.prototype.retrieve = function retrieve(key) {
      var i = key_idx(this, key);
      return 0 <= i ? this.__hash_vals__[i] : this.__default_value__(this, key);
    };
    Hash.prototype.get = Hash.prototype.retrieve;
    Hash.prototype.isEmpty = function isEmpty() {
      return 0 === this.__count__;
    };
    Hash.prototype.__defineGetter__("count", function count() {
      return this.__count__;
    });
    Hash.prototype.__defineGetter__("keys", function keys() {
      return this.__hash_keys__.slice();
    });
    Hash.prototype.clone = function() {
      var copy = new Hash(this.__default_value__);
      this.__hash_keys__.forEach(function(k) {
        if (this.hasKey(k)) {
          copy.set(k, this.get(k));
        }
      }, this);
      return copy;
    };
    Hash.create = function create(defaultValue) {
      return new Hash(defaultValue);
    };
  }
});

// dep:types_lib_types_hash__js
var types_lib_types_hash_js_default = require_hash();
export {
  types_lib_types_hash_js_default as default
};
//# sourceMappingURL=types_lib_types_hash__js.js.map
