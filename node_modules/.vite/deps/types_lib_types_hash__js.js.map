{
  "version": 3,
  "sources": ["../../types/lib/types/hash.js", "dep:types_lib_types_hash__js"],
  "sourcesContent": ["/**\n *  class Hash\n *\n *  Provides hashtable, where keys can be anything\n *\n *      var o1 = {},\n *          o2 = {},\n *          hash = new Hash();\n *\n *      hash.store(o1, 'abc');\n *      hash.store(o2, 'def');\n *\n *      hash.retrieve(o1); // -> 'abc'\n *      hash.retrieve(o2); // -> 'def'\n *      hash.retrieve({}); // -> undefined\n **/\n\n\n'use strict';\n\n\nfunction key_idx(self, key) {\n  return self.__hash_keys__.indexOf(key);\n}\n\n\n/**\n *  new Hash([defaultValue])\n *  - defaultValue (Mixed): value returned by [[Hash#get]] when key not found.\n *\n *  Creates new instance of Hash.\n *\n *      var h1 = new Hash(-1);\n *      h1.retrieve('test');\n *      // -> -1\n *\n *      var h2 = new Hash();\n *      h2.retrieve('test');\n *      // -> undefined\n **/\nvar Hash = module.exports = function Hash(defaultValue) {\n  this.__hash_index__     = 0;\n  this.__hash_keys__      = [];\n  this.__hash_vals__      = [];\n  this.__default_value__  = ('function' === typeof defaultValue) ?  defaultValue\n                          : function (/* h, k */) { return defaultValue; };\n  this.__count__          = 0;\n};\n\n\n/**\n *  Hash#store(key, val) -> Mixed\n *  - key (Mixed): Key. Can be any object (not only a string or number).\n *  - val (Mixed): Value.\n *\n *  Associate `key` with `val`, and return `val` back.\n *\n *  ##### Example\n *\n *      hash.store(123,           'abc');\n *      hash.store('string key',  'def');\n *      hash.store([1, 2, 3],     'ghi');\n *      hash.store({even: 'obj'}, 'jkl');\n *\n *  ##### Warning\n *\n *  Native JS Object allows only keys, so it stringifies any key you give to it,\n *  thus array `[1, 2, 3]` becomes `[1,2,3]` (string) when used as key, and\n *  any object becomes something like `[object Object]`.\n *\n *  Hash do not stringifies or anyhow modifies given object. That meanse that\n *  two instances of arrays (even with same values) are in fact different\n *  objects. See example:\n *\n *      var a1 = [1,2,3], a2 = [1,2,3];\n *\n *      hash.store(a1, 'A1');\n *      hash.store(a2, 'A2');\n *\n *      hash.retrieve(a1); // -> 'A1'\n *      hash.retrieve(a2); // -> 'A2'\n *\n *      // Similar to:\n *\n *      var o1 = {foo: 'bar'}, o2 = {foo: 'bar'};\n *\n *      hash.store(o1, 'O1');\n *      hash.store(o2, 'O2');\n *\n *      hash.retrieve(o1); // -> 'O1'\n *      hash.retrieve(o2); // -> 'O2'\n *\n **/\nHash.prototype.store = function store(key, val) {\n  var i = this.__hash_keys__.indexOf(key);\n\n  if (0 <= i) {\n    this.__hash_vals__[i] = val;\n    return;\n  }\n\n  i = this.__hash_index__;\n  this.__hash_index__ += 1;\n  this.__count__ += 1;\n\n  this.__hash_keys__[i] = key;\n  this.__hash_vals__[i] = val;\n\n  return val;\n};\n\n\n/** alias of: Hash#store\n *  Hash#set(key, val) -> Void\n **/\nHash.prototype.set = Hash.prototype.store;\n\n\n/**\n *  Hash#remove(key) -> Mixed\n *  - key (Mixed): Key to remove.\n *\n *  Removes given `key` and returns associated value.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.store(key, 'abc');\n *      hash.retrieve(key); // -> 'abc'\n *      hash.remove(key); // -> 'abc'\n *      hash.retrieve(key); // -> undefined\n **/\nHash.prototype.remove = function remove(key) {\n  var i = key_idx(this, key), val = this.__hash_vals__[i];\n\n  if (0 <= i) {\n    delete this.__hash_keys__[i];\n    delete this.__hash_vals__[i];\n    this.__count__ -= 1;\n  }\n\n  return val;\n};\n\n\n/**\n *  Hash#hasKey(key) -> Boolean\n *  - key (Mixed): Key of check.\n *\n *  Returns boolean `TRUE` whenever `key` present in the hash.\n *\n *  ##### Example\n *\n *      var k1 = {}, k2 = {};\n *\n *      hash.store(key, 'abc');\n *      hash.hasKey(k1); // -> true\n *      hash.hasKey(k2); // -> false\n **/\nHash.prototype.hasKey = function hasKey(key) {\n  return 0 <= key_idx(this, key);\n};\n\n\n/**\n *  Hash#retrieve(key) -> Mixed\n *  - key (Mixed): Key of the value to retrieve.\n *\n *  Returns value associated with `key`.\n *\n *  ##### Example\n *\n *      var k1 = {}, k2 = {};\n *\n *      hash.store(key, 'abc');\n *      hash.retrieve(k1); // -> 'abc'\n *      hash.retrieve(k2); // -> undefined\n **/\nHash.prototype.retrieve = function retrieve(key) {\n  var i = key_idx(this, key);\n  return (0 <= i) ? this.__hash_vals__[i] : this.__default_value__(this, key);\n};\n\n\n/** alias of: Hash#retrieve\n *  Hash#get(key, val) -> Void\n **/\nHash.prototype.get = Hash.prototype.retrieve;\n\n\n/**\n *  Hash#isEmpty() -> Boolean\n *\n *  Returns boolean `TRUE` whenever hash has no elements.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.isEmpty();\n *      // -> true\n *\n *      hash.store(key, 'abc');\n *      hash.isEmpty();\n *      // -> false\n *\n *      hash.remove(key);\n *      hash.isEmpty();\n *      // -> true\n **/\nHash.prototype.isEmpty = function isEmpty() {\n  return 0 === this.__count__;\n};\n\n\n/**\n *  Hash#count -> Number\n *\n *  Returns amount of hash elements.\n *\n *  ##### Example\n *\n *      var key = {};\n *\n *      hash.count\n *      // -> 0\n *\n *      hash.store(key, 'abc');\n *      hash.count\n *      // -> 1\n *\n *      hash.remove(key);\n *      hash.count\n *      // -> 0\n **/\nHash.prototype.__defineGetter__('count', function count() {\n  return this.__count__;\n});\n\n\n/**\n *  Hash#keys -> Array\n *\n *  Returns an array all keys presented in the hash\n **/\nHash.prototype.__defineGetter__('keys', function keys() {\n  return this.__hash_keys__.slice();\n});\n\n\n/**\n *  Hash#clone() -> Hash\n *\n *  Returns copy of the hash.\n **/\nHash.prototype.clone = function () {\n  var copy = new Hash(this.__default_value__);\n\n  this.__hash_keys__.forEach(function (k) {\n    if (this.hasKey(k)) {\n      copy.set(k, this.get(k));\n    }\n  }, this);\n\n  return copy;\n};\n\n\n/** alias: Hash.new\n *  Hash.create() -> SortedSet\n *\n *  Constructor proxy.\n **/\nHash.create = function create(defaultValue) {\n  return new Hash(defaultValue);\n};\n", "export default require(\"./node_modules/types/lib/types/hash.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAqBA,qBAAiB,MAAM,KAAK;AAC1B,aAAO,KAAK,cAAc,QAAQ,GAAG;AAAA,IACvC;AAiBA,QAAI,OAAO,OAAO,UAAU,eAAc,cAAc;AACtD,WAAK,iBAAqB;AAC1B,WAAK,gBAAqB,CAAC;AAC3B,WAAK,gBAAqB,CAAC;AAC3B,WAAK,oBAAsB,eAAe,OAAO,eAAiB,eACxC,WAAsB;AAAE,eAAO;AAAA,MAAc;AACvE,WAAK,YAAqB;AAAA,IAC5B;AA8CA,SAAK,UAAU,QAAQ,eAAe,KAAK,KAAK;AAC9C,UAAI,IAAI,KAAK,cAAc,QAAQ,GAAG;AAEtC,UAAI,KAAK,GAAG;AACV,aAAK,cAAc,KAAK;AACxB;AAAA,MACF;AAEA,UAAI,KAAK;AACT,WAAK,kBAAkB;AACvB,WAAK,aAAa;AAElB,WAAK,cAAc,KAAK;AACxB,WAAK,cAAc,KAAK;AAExB,aAAO;AAAA,IACT;AAMA,SAAK,UAAU,MAAM,KAAK,UAAU;AAkBpC,SAAK,UAAU,SAAS,gBAAgB,KAAK;AAC3C,UAAI,IAAI,QAAQ,MAAM,GAAG,GAAG,MAAM,KAAK,cAAc;AAErD,UAAI,KAAK,GAAG;AACV,eAAO,KAAK,cAAc;AAC1B,eAAO,KAAK,cAAc;AAC1B,aAAK,aAAa;AAAA,MACpB;AAEA,aAAO;AAAA,IACT;AAiBA,SAAK,UAAU,SAAS,gBAAgB,KAAK;AAC3C,aAAO,KAAK,QAAQ,MAAM,GAAG;AAAA,IAC/B;AAiBA,SAAK,UAAU,WAAW,kBAAkB,KAAK;AAC/C,UAAI,IAAI,QAAQ,MAAM,GAAG;AACzB,aAAQ,KAAK,IAAK,KAAK,cAAc,KAAK,KAAK,kBAAkB,MAAM,GAAG;AAAA,IAC5E;AAMA,SAAK,UAAU,MAAM,KAAK,UAAU;AAuBpC,SAAK,UAAU,UAAU,mBAAmB;AAC1C,aAAO,MAAM,KAAK;AAAA,IACpB;AAuBA,SAAK,UAAU,iBAAiB,SAAS,iBAAiB;AACxD,aAAO,KAAK;AAAA,IACd,CAAC;AAQD,SAAK,UAAU,iBAAiB,QAAQ,gBAAgB;AACtD,aAAO,KAAK,cAAc,MAAM;AAAA,IAClC,CAAC;AAQD,SAAK,UAAU,QAAQ,WAAY;AACjC,UAAI,OAAO,IAAI,KAAK,KAAK,iBAAiB;AAE1C,WAAK,cAAc,QAAQ,SAAU,GAAG;AACtC,YAAI,KAAK,OAAO,CAAC,GAAG;AAClB,eAAK,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC;AAAA,QACzB;AAAA,MACF,GAAG,IAAI;AAEP,aAAO;AAAA,IACT;AAQA,SAAK,SAAS,gBAAgB,cAAc;AAC1C,aAAO,IAAI,KAAK,YAAY;AAAA,IAC9B;AAAA;AAAA;;;ACpRA,IAAO,kCAAQ;",
  "names": []
}
