{"version":3,"file":"ToggleRefinement.vue.js","sources":["../../../../src/components/ToggleRefinement.vue"],"sourcesContent":["<template>\n  <div\n    v-if=\"state\"\n    :class=\"[suit(), !canRefine && suit('', 'noRefinement')]\"\n  >\n    <slot\n      :value=\"state.value\"\n      :can-refine=\"canRefine\"\n      :refine=\"state.refine\"\n      :createURL=\"state.createURL\"\n      :send-event=\"state.sendEvent\"\n    >\n      <label :class=\"suit('label')\">\n        <input\n          :class=\"suit('checkbox')\"\n          type=\"checkbox\"\n          :name=\"state.value.name\"\n          :value=\"on\"\n          :checked=\"state.value.isRefined\"\n          @change=\"state.refine(state.value)\"\n        >\n        <span :class=\"suit('labelText')\">{{ label }}</span>\n        <span\n          v-if=\"state.value.count !== null\"\n          :class=\"suit('count')\"\n        >{{ state.value.count.toLocaleString() }}</span>\n      </label>\n    </slot>\n  </div>\n</template>\n\n<script>\nimport { connectToggleRefinement } from 'instantsearch.js/es/connectors';\nimport { createWidgetMixin } from '../mixins/widget';\nimport { createPanelConsumerMixin } from '../mixins/panel';\nimport { createSuitMixin } from '../mixins/suit';\n\nconst mapStateToCanRefine = state => Boolean(state.value && state.value.count);\n\nexport default {\n  name: 'AisToggleRefinement',\n  mixins: [\n    createSuitMixin({ name: 'ToggleRefinement' }),\n    createWidgetMixin(\n      {\n        connector: connectToggleRefinement,\n      },\n      {\n        $$widgetType: 'ais.toggleRefinement',\n      }\n    ),\n    createPanelConsumerMixin({\n      mapStateToCanRefine,\n    }),\n  ],\n  props: {\n    attribute: {\n      type: String,\n      required: true,\n    },\n    label: {\n      type: String,\n      required: true,\n    },\n    on: {\n      type: [String, Number, Boolean, Array],\n      required: false,\n      default: true,\n    },\n    off: {\n      type: [String, Number, Boolean, Array],\n      required: false,\n      default: undefined,\n    },\n  },\n  computed: {\n    widgetParams() {\n      return {\n        attribute: this.attribute,\n        label: this.label,\n        on: this.on,\n        off: this.off,\n      };\n    },\n    canRefine() {\n      return mapStateToCanRefine(this.state);\n    },\n  },\n};\n</script>\n"],"names":["const","mapStateToCanRefine","state","Boolean","value","count","render","name","mixins","createSuitMixin","createWidgetMixin","connector","connectToggleRefinement","$$widgetType","createPanelConsumerMixin","props","attribute","type","String","required","label","on","Number","Array","default","off","undefined","computed","widgetParams","this","canRefine"],"mappings":"4PAqCAA,IAAMC,WAAsBC,UAASC,QAAQD,EAAME,OAASF,EAAME,MAAMC,sBAEzD,CAACC,ovBACdC,KAAM,sBACNC,OAAQ,CACNC,EAAgB,CAAEF,KAAM,qBACxBG,EACE,CACEC,UAAWC,GAEb,CACEC,aAAc,yBAGlBC,EAAyB,qBACvBb,KAGJc,MAAO,CACLC,UAAW,CACTC,KAAMC,OACNC,UAAU,GAEZC,MAAO,CACLH,KAAMC,OACNC,UAAU,GAEZE,GAAI,CACFJ,KAAM,CAACC,OAAQI,OAAQnB,QAASoB,OAChCJ,UAAU,EACVK,SAAS,GAEXC,IAAK,CACHR,KAAM,CAACC,OAAQI,OAAQnB,QAASoB,OAChCJ,UAAU,EACVK,aAASE,IAGbC,SAAU,CACRC,8BACS,CACLZ,UAAWa,KAAKb,UAChBI,MAAOS,KAAKT,MACZC,GAAIQ,KAAKR,GACTI,IAAKI,KAAKJ,MAGdK,4BACS7B,EAAoB4B,KAAK3B"}