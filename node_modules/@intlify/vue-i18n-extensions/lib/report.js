"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.report = exports.getReportMessage = void 0;
const shared_1 = require("@intlify/shared");
// TODO: should be extracted as i18n resources (intlify project self hosting!)
const ReportMessages = {
    [1 /* UNEXPECTED_DIRECTIVE_EXPRESSION */]: `Unexpected directive expression: {0}`,
    [2 /* NOT_SUPPORTED */]: `Not supported transform: {0}`,
    [3 /* FAILED_VALUE_EVALUATION */]: `Failed valu evaluation: {0}`,
    [4 /* REQUIRED_PARAMETER */]: `Required parameter: {0}`,
    [5 /* INVALID_PARAMETER_TYPE */]: `Required parameter: {0}`,
    [6 /* NOT_SUPPORTED_PRESERVE */]: `Not supportted 'preserve': {0}`,
    [7 /* ORVERRIDE_ELEMENT_CHILDREN */]: `v-t will override element children: {0}`
};
function getReportMessage(code, ...args) {
    return shared_1.format(ReportMessages[code], ...args);
}
exports.getReportMessage = getReportMessage;
function createExtensionsError(code, msg, loc) {
    const error = new SyntaxError(msg);
    error.code = code;
    if (loc) {
        error.loc = loc;
    }
    return error;
}
function report(code, optinos = {}) {
    const mode = optinos.mode &&
        shared_1.isString(optinos.mode) &&
        ['warn', 'error'].includes(optinos.mode)
        ? optinos.mode
        : 'warn';
    const msg = getReportMessage(code, optinos.args);
    if (mode === 'warn') {
        console.warn('[vue-i18n-extensions] ' + msg);
    }
    else {
        // error
        throw createExtensionsError(code, msg, optinos.loc);
    }
}
exports.report = report;
